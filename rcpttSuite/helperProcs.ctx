--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: helperProcs
Element-Type: context
Element-Version: 2.0
Id: _2UF_4DbkEeWPP_kFBF0hLg
Runtime-Version: 2.0.0.201506120617
Save-Time: 1/7/16 9:46 AM

------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa
Content-Type: text/plain
Entry-Name: .description

Helper procedures. Typically used by procedures in userProcs.ctx but may be called directly from test cases.
This should be set as a Default Context in the Project Settings.

------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa--
------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

// ----------------------------------------------------------------------------
// Description:
// This file contains helper procedures typically called by procedures in
// the userProcs.ctx file. This does not preclude the direct use of these
// procedures, but more care must be taken that the assumptions of these
// procedures have been satisfied.
// ----------------------------------------------------------------------------


// ----------------------------------------------------------------------------
// Checks that a Tree-Item is a System Implementation.
//
// Description:
// Given an Item object, checks that it is a System Implementation.
// This is not limited to a Tree-Item but the typical usage is for 
// iterating through a Tree in the Eclipse Outline view to find the
// System Implementations.
//
// Assumptions:
// - the given Item argument is from the Eclipse Outline view
//
// Arguments:
// item tree_item - An item (typically from a Tree) to check 
//                  as system implmentation
//
// Return:
// bool: true if system implementation, false otherwise
//
// Usage:
// get-view Outline | get-tree | get-items | foreach [val item] {
//    if [is-system-impl $item] {
//       ...do something...
//    }
// }
// ----------------------------------------------------------------------------
proc "is-system-impl" [val tree_item] {
    //$tree_item | get-text | contains ".Impl"
    $tree_item | get-text | contains "System Impl"
}


// ----------------------------------------------------------------------------
// Checks that AGREE is still running
//
// Description:
// Checks the Result (second) column of the AGREE Resuls view to see if AGREE
// is still running. Checks for any result that has the text "Waiting" or
// "Working" as an indicator that AGREE is running.
//
// Assumptions:
// - AGREE has been started by another procedure
//
// Return:
// bool true if running, false otherwise
// ----------------------------------------------------------------------------
proc "is-agree-working" {

    // This appears to work for all cases
    or
    [get-view "AGREE Results" | get-tree | get-items | foreach [val item] {    
        $item | get-property "columns[1]" -raw | contains "Working"         
    }]
    [get-view "AGREE Results" | get-tree | get-items | foreach [val item] {    
        $item | get-property "columns[1]" -raw | contains "Waiting"         
    }]
    [get-view "AGREE Results" | get-tree | get-items | foreach [val item] {    
        $item | get-property "columns[1]" -raw | equals ""         
    }]
}


// ----------------------------------------------------------------------------
// Wait for AGREE to finish running
//
// Description:
// Runs a loop calling the procedure "is-agree-working", if AGREE is still running will
// wait and then check again. When AGREE has finished will return.
//
// Assumptions:
// - AGREE has started. Behavior undefined otherwise.
// ----------------------------------------------------------------------------
proc "wait-for-agree" {
    loop {
        if [is-agree-working | eq true] {
            wait 100 
            recur
        } -else {}
    }
}


// ----------------------------------------------------------------------------
// Given an Item will run AGREE Verify Single Layer
// 
// Description:
// Given an Item (presumably from the Outline view) will run the AGREE 
// Single Layer. Does allow for a status dialog pop-up if titled
// "Problem Occurred". 
//
// Assumptions:
// - The item is from the Outline View
// - The item is a system implementation, otherwise will follow exception path
//
// Arguments:
// item item - Typically Outline view item that is a system implementation
//
// Return:
// True if AGREE ran. False if there is no AGREE annex in the system
// implementation.
//
// Assertions:
// Will assert to halt test case execution if the check-problem-dialog 
// reports that an error in the status dialog.
// ----------------------------------------------------------------------------
proc "run-agree-single-layer" [val item] {
    exec-with-options {
        log [format "AGREE Verify Single Layer: %s" [$item | get-text]]
        $item | select-item | get-menu "AGREE/Verify Single Layer" | click    
    } -allowStatusDialog
        
    let [val result [check-problem-dialog] ] {        

        // If the result value is 1.0, then we believe AGREE is running
        if [$result | equals [float "1.0"]] {
            bool true
        } -else {
            // If the result is 0.0 then we got a status dialog for no
            // AGREE annex found. AGREE did not run.
            if [$result | equals [float "0.0"]] {
                log "No AGREE annex found."
                bool false
            } -else {
                // Otherwise we got some other error reported in the status
                // dialog. Stop the execution.
                log "Error starting AGREE. Stop Test Case Execution"
                bool false | assert-true
            }
        }        
    }
}


// ----------------------------------------------------------------------------
// Given an Item will run AGREE Verify All Layers
// 
// Description:
// Given an Item (presumably from the Outline view) will run the AGREE 
// All Layers. Does allow for a status dialog pop-up if titled
// "Problem Occurred". 
//
// Assumptions:
// - The item is from the Outline View
// - The item is a system implementation, otherwise will follow exception path
//
// Arguments:
// item item - Typically Outline view item that is a system implementation
//
// Return:
// True if AGREE ran. False if there is no AGREE annex in the system
// implementation.
//
// Assertions:
// Will assert to halt test case execution if the check-problem-dialog 
// reports that an error in the status dialog.
// ----------------------------------------------------------------------------
proc "run-agree-all-layers" [val item] {
    exec-with-options {
        log [format "AGREE Verify All Layers: %s" [$item | get-text]]
        $item | select-item | get-menu "AGREE/Verify All Layers" | click
    } -allowStatusDialog
    
    let [val result [check-problem-dialog] ] {

        // If the result value is 1.0, then we believe AGREE is running
        if [$result | equals [float "1.0"]] {
            bool true
        } -else {
            // If the result is 0.0 then we got a status dialog for no
            // AGREE annex found. AGREE did not run.
            if [$result | equals [float "0.0"]] {
                log "No AGREE annex found."
                bool false
            } -else {
                // Otherwise we got some other error reported in the status
                // dialog. Stop the execution.
                log "Error starting AGREE. Stop Test Case Execution"
                bool false | assert-true
            }
        }
    }
}


// ----------------------------------------------------------------------------
// Handles the "Problem Occurred" status dialog pop-up
// 
// Description:
// If an operation causes the "Problem Occurred" dialog to present, this 
// procedure will click the OK button to clear the dialog. If the dialog
// is reporting that an AGREE annex was not found will return false. If
// the dialog is reporting any other type of error will use an assertion to
// stop the test case execution.
//
// Typical usage is following a command to run AGREE. If this returns false
// the check of the AGREE results can be skipped (as there was no AGREE annex).
//
//
// Assumptions:
// - The calling procedure allows status dialogs:
//      exec-with-options {
//         ...some commands...
//         check-problem-dialog
//      } -allowStatusDialog
//
// Return:
// float 1.0  if no dialog present (happy path)
// float 0.0  if the Problem Dialog is reporting no AGREE Annex
// float -1.0 if the Problem Dialog reports some other error
//
// ----------------------------------------------------------------------------
proc "check-problem-dialog" {
    try -command {
        get-window "Problem Occurred" | get-button "Details >>" | click
        let[val theStr [get-window "Problem Occurred" | get-editbox | get-text] ] {
            get-window "Problem Occurred" | get-button OK | click            
            if[ $theStr | contains "There is not an AGREE annex in the" ] {
                // Return 0 if the status dialog reports no AGREE annex
                float "0"
            } -else {
                // Return -1 if some other error is reported in the
                // status dialog.
                float "-1"
            }
        }
    } -catch {
        // Return 1 for success, no status dialog present.
        float "1" 
    }
}


// ----------------------------------------------------------------------------
// Checks that the AGREE Contract Guarantees are valid.
//
// Desription:
// Checks the AGREE Results view and determines if the top-level Contract
// Guarantees reports valid. Will wait for AGREE to finish before checking.
// 
// Assumptions:
// - AGREE has been started
//
// Return:
// bool true if valid, false otherwise
// ----------------------------------------------------------------------------
proc "is-guarantees-valid" {
    is-agree-result-valid "Contract Guarantees"
}


// ----------------------------------------------------------------------------
// Checks the AGREE Composition Consistency
//
// Desription:
// Checks the AGREE Results view and determines if the Component Composition
// Consistency reports valid. Will wait for AGREE to finish before checking.
// 
// Assumptions:
// - AGREE has been started
//
// Return:
// bool true if valid, false otherwise
// ----------------------------------------------------------------------------
proc "is-composition-consistent" {
    is-agree-result-valid "Component composition consistent"
}


// ----------------------------------------------------------------------------
// Checks that the AGREE Component is Consistent
//
// Desription:
// Checks the AGREE Results view and determines if the Component is
// Consistent. Will wait for AGREE to finish before checking.
// 
// Assumptions:
// - AGREE has been started
//
// Return:
// bool true if valid, false otherwise
// ----------------------------------------------------------------------------
proc "is-component-consistent" {
    is-agree-result-valid "This component consistent"    
}


// ----------------------------------------------------------------------------
// Checks that the AGREE Component is "Valid"
//
// Desription:
// Checks the AGREE Results view and determines if the result is "Valid".
// Will wait for AGREE to finish before checking.
// Will report a failure if "Invalid" or "Unknown" is found in the string.
// 
// Assumptions:
// - AGREE has been started
//
// Return:
// bool true if valid, false otherwise
// ----------------------------------------------------------------------------
proc "is-item-valid" [val item] {
    is-agree-result-valid $item
}


// ----------------------------------------------------------------------------
// Checks that the AGREE Component is "Invalid"
//
// Desription:
// Checks the AGREE Results view and determines if the result is "Invalid".
// Will wait for AGREE to finish before checking.
// Will report a failure if "Valid" or "Unknown" is found in the string.
// 
// Assumptions:
// - AGREE has been started
//
// Return:
// bool true if valid, false otherwise
// ----------------------------------------------------------------------------
proc "is-item-invalid" [val item] {
    is-agree-result-invalid $item
}


// ----------------------------------------------------------------------------
// Checks that the AGREE Component is "Unknown"
//
// Desription:
// Checks the AGREE Results view and determines if the result is "Unknown".
// Will wait for AGREE to finish before checking.
// Will report a failure if "Valid" or "Invalid" is found in the string.
// 
// Assumptions:
// - AGREE has been started
//
// Return:
// bool true if valid, false otherwise
// ----------------------------------------------------------------------------
proc "is-item-unknown" [val item] {
    is-agree-result-unknown $item
}


// ----------------------------------------------------------------------------
// Checks that an AGREE Result is Valid
//
// Desription:
// Given a string argument denoting a tree-item (Property column) name in the 
// AGREE Results view, will check that the Result reported is "Valid". Will
// report a failure if "Unknown" or "Invalid" is found in the string.
//
// Assumptions:
// - AGREE has been started
//
// Return:
// bool true if valid, false otherwise
// ----------------------------------------------------------------------------
proc "is-agree-result-valid" [val theProperty] {
    wait-for-agree
    try -command {
        // For AGREE Results stemming from running AGREE Single Layer
        and [get-view "AGREE Results" | get-tree | get-item $theProperty | get-property "columns[1]" -raw | contains "Valid"]
            [get-view "AGREE Results" | get-tree | get-item $theProperty | get-property "columns[1]" -raw | contains "Invalid" | not]
            [get-view "AGREE Results" | get-tree | get-item $theProperty | get-property "columns[1]" -raw | contains "Unknown" | not]
    } -catch {
        // For AGREE Results stemming from running AGREE All Layers
        let [val newProperty [concat [get-view "AGREE Results" | get-tree | get-item ".*" | get-text] "/" [$theProperty]]] {
            and [get-view "AGREE Results" | get-tree | get-item $newProperty | get-property "columns[1]" -raw | contains "Valid"]
                [get-view "AGREE Results" | get-tree | get-item $newProperty | get-property "columns[1]" -raw | contains "Invalid" | not]
                [get-view "AGREE Results" | get-tree | get-item $newProperty | get-property "columns[1]" -raw | contains "Unknown" | not]
        }
    }
}


// ----------------------------------------------------------------------------
// Checks that an AGREE Result is Invalid
//
// Desription:
// Given a string argument denoting a tree-item (Property column) name in the 
// AGREE Results view, will check that the Result reported is invalid. Will
// report a failure if "Valid" or "Unknown" is found in the string.
//
// Assumptions:
// - AGREE has been started
//
// Return:
// bool true if valid, false otherwise
// ----------------------------------------------------------------------------
proc "is-agree-result-invalid" [val theProperty] {
    wait-for-agree
    try -command {
        // For AGREE Results stemming from running AGREE Single Layer
        and [get-view "AGREE Results" | get-tree | get-item $theProperty | get-property "columns[1]" -raw | contains "Valid" | not]
            [get-view "AGREE Results" | get-tree | get-item $theProperty | get-property "columns[1]" -raw | contains "Invalid"]
            [get-view "AGREE Results" | get-tree | get-item $theProperty | get-property "columns[1]" -raw | contains "Unknown" | not]
    } -catch {
        // For AGREE Results stemming from running AGREE All Layers
        let [val newProperty [concat [get-view "AGREE Results" | get-tree | get-item ".*" | get-text] "/" [$theProperty]]] {
            and [get-view "AGREE Results" | get-tree | get-item $newProperty | get-property "columns[1]" -raw | contains "Valid" | not]
                [get-view "AGREE Results" | get-tree | get-item $newProperty | get-property "columns[1]" -raw | contains "Invalid"]
                [get-view "AGREE Results" | get-tree | get-item $newProperty | get-property "columns[1]" -raw | contains "Unknown" | not]
        }
    }
}


// ----------------------------------------------------------------------------
// Checks that an AGREE Result is Unknown
//
// Desription:
// Given a string argument denoting a tree-item (Property column) name in the 
// AGREE Results view, will check that the Result reported is "Unknown". Will
// report a failure if "Valid" or "Invalid" are found in the string.
//
// Assumptions:
// - AGREE has been started
//
// Return:
// bool true if valid, false otherwise
// ----------------------------------------------------------------------------
proc "is-agree-result-unknown" [val theProperty] {
    wait-for-agree
    try -command {
        // For AGREE Results stemming from running AGREE Single Layer
        and [get-view "AGREE Results" | get-tree | get-item $theProperty | get-property "columns[1]" -raw | contains "Valid" | not]
            [get-view "AGREE Results" | get-tree | get-item $theProperty | get-property "columns[1]" -raw | contains "Invalid" | not]
            [get-view "AGREE Results" | get-tree | get-item $theProperty | get-property "columns[1]" -raw | contains "Unknown"]
    } -catch {
        // For AGREE Results stemming from running AGREE All Layers
        let [val newProperty [concat [get-view "AGREE Results" | get-tree | get-item ".*" | get-text] "/" [$theProperty]]] {
            and [get-view "AGREE Results" | get-tree | get-item $newProperty | get-property "columns[1]" -raw | contains "Valid" | not]
                [get-view "AGREE Results" | get-tree | get-item $newProperty | get-property "columns[1]" -raw | contains "Invalid" | not]
                [get-view "AGREE Results" | get-tree | get-item $newProperty | get-property "columns[1]" -raw | contains "Unknown"]
        }
    }
}


// ----------------------------------------------------------------------------
// Checks a specific AGREE Result Property for a given Result
//
// Desription:
// Given a string argument denoting a tree-item (Property column) name in the 
// AGREE Results view, will check that the Result column matches the string
// argument for the result. 
//
// Assumptions:
// - AGREE has been started
//
// Arguments:
// string theProperty - Property column name in the AGREE Results View
// string theResult - Result column string to search for
//
// Return:
// bool true if theResult string is contained in the Result column, 
//      false otherwise
// ----------------------------------------------------------------------------
proc "check-agree-result" [val theProperty][val theResult] {
    wait-for-agree
    
    try -command {
        // For AGREE Results stemming from running AGREE Single Layer
        //get-view "AGREE Results" | get-tree | get-item $theProperty | get-property "columns[1]" -raw | contains $theResult
        get-view "AGREE Results" | get-tree | get-item $theProperty | get-property "columns[1]" -raw | equals $theResult
                
    } -catch {
        // For AGREE Results stemming from running AGREE All Layers
        let [val newProperty [concat [get-view "AGREE Results" | get-tree | get-item ".*" | get-text] "/" [$theProperty]]] {
            //get-view "AGREE Results" | get-tree | get-item $newProperty | get-property "columns[1]" -raw | contains $theResult
            get-view "AGREE Results" | get-tree | get-item $newProperty | get-property "columns[1]" -raw | equals $theResult
        }
    }
}


// ----------------------------------------------------------------------------
// Reads through all the AGREE Result Properties, checks for Validity
//
// Desription:
// After AGREE finishes execution will read through the tree of AGREE Results
// looking for each result column to contain "Valid", but also to NOT contain
// either "Invalid" or "Unknown". 
//
// Assumptions:
// - AGREE has been started
//
// Arguments:
// None
//
// Return:
// None
//
// Assertions:
// Asserts true if all are Valid, asserts false otherwise
// ----------------------------------------------------------------------------
proc "verify-all-results" {
    wait-for-agree

    get-view "AGREE Results" | get-tree | get-items | foreach [val item] {
        
        and [$item | get-property "columns[1]" -raw | contains "Valid"]
            [$item | get-property "columns[1]" -raw | contains "Invalid" | not ]
            [$item | get-property "columns[1]" -raw | contains "Unknown" | not ] | verify-true
    }
}
------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
