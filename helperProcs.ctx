--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: helperProcs
Element-Type: context
Element-Version: 2.0
Id: _2UF_4DbkEeWPP_kFBF0hLg
Runtime-Version: 2.0.0.201506120617
Save-Time: 8/19/15 9:05 AM

------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa
Content-Type: text/plain
Entry-Name: .description

Helper procedures. Typically used by procedures in userProcs.ctx but may be called directly from test cases.
This should be set as a Default Context in the Project Settings.

------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa--
------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

// ----------------------------------------------------------------------------
// Description:
// This file contains helper procedures typically called by procedures in
// the userProcs.ctx file. This does not preclude the direct use of these
// procedures, but more care must be taken that the assumptions of these
// procedures have been satisfied.
// ----------------------------------------------------------------------------


// ----------------------------------------------------------------------------
// Checks that a Tree-Item is a System Implementation.
//
// Description:
// Given an Item object, checks that it is a System Implementation.
// This is not limited to a Tree-Item but the typical usage is for 
// iterating through a Tree in the Eclipse Outline view to find the
// System Implementations.
//
// Assumptions:
// - the given Item argument is from the Eclipse Outline view
//
// Arguments:
// item tree_item - An item (typically from a Tree) to check 
//                  as system implmentation
//
// Return:
// bool: true if system implementation, false otherwise
//
// Usage:
// get-view Outline | get-tree | get-items | foreach [val item] {
//    if [is-system-impl $item] {
//       ...do something...
//    }
// }
// ----------------------------------------------------------------------------
proc "is-system-impl" [val tree_item] {
    //$tree_item | get-text | contains ".Impl"
    $tree_item | get-text | contains "System Impl"
}


// ----------------------------------------------------------------------------
// Checks that AGREE is still running
//
// Description:
// Checks the Result (second) column of the AGREE Resuls view to see if AGREE
// is still running. Checks for any result that has the text "Waiting" or
// "Working" as an indicator that AGREE is running.
//
// Assumptions:
// - AGREE has been started by another procedure
//
// Return:
// bool true if running, false otherwise
// ----------------------------------------------------------------------------
proc "is-agree-working" {

    or
    // Working
    [get-view "AGREE Results" | get-tree | get-items | foreach [val item] {
        if [$item | get-text | contains "Contract Guarantees"] { 
            $item | get-property "columns[1]" -raw | contains "Working" 
        }
    }]
    [get-view "AGREE Results" | get-tree | get-items | foreach [val item] {
        if [$item | get-text | contains "This component consistent"] { 
            $item | get-property "columns[1]" -raw | contains "Working" 
        }
    }]
    [get-view "AGREE Results" | get-tree | get-items | foreach [val item] {
        if [$item | get-text | contains "Component composition consistent"] { 
            $item | get-property "columns[1]" -raw | contains "Working" 
        }
    }]
    // Waiting
    [get-view "AGREE Results" | get-tree | get-items | foreach [val item] {
        if [$item | get-text | contains "Contract Guarantees"] { 
            $item | get-property "columns[1]" -raw | contains "Waiting" 
        }
    }]
    [get-view "AGREE Results" | get-tree | get-items | foreach [val item] {
        if [$item | get-text | contains "This component consistent"] { 
            $item | get-property "columns[1]" -raw | contains "Waiting" 
        }
    }]
    [get-view "AGREE Results" | get-tree | get-items | foreach [val item] {
        if [$item | get-text | contains "Component composition consistent"] { 
            $item | get-property "columns[1]" -raw | contains "Waiting" 
        }
    }]
    // Blank
    [get-view "AGREE Results" | get-tree | get-items | foreach [val item] {
        if [$item | get-text | contains "Contract Guarantees"] { 
            $item | get-property "columns[1]" -raw | equals "" 
        }
    }]
    [get-view "AGREE Results" | get-tree | get-items | foreach [val item] {
        if [$item | get-text | contains "This component consistent"] { 
            $item | get-property "columns[1]" -raw | equals "" 
        }
    }]
    [get-view "AGREE Results" | get-tree | get-items | foreach [val item] {
        if [$item | get-text | contains "Component composition consistent"] { 
            $item | get-property "columns[1]" -raw | equals "" 
        }
    }]
}


// ----------------------------------------------------------------------------
// Wait for AGREE to finish running
//
// Description:
// Runs a loop calling the procedure "is-agree-working", if AGREE is still running will
// wait and then check again. When AGREE has finished will return.
//
// Assumptions:
// - AGREE has started. Behavior undefined otherwise.
// ----------------------------------------------------------------------------
proc "wait-for-agree" {
    loop {
        if [is-agree-working | eq true] {
            wait 100 
            recur
        } -else {}
    }
}


// ----------------------------------------------------------------------------
// Given an Item will run AGREE Verify Single Layer
// 
// Description:
// Given an Item (presumably from the Outline view) will run the AGREE 
// Single Layer. Does allow for a status dialog pop-up if titled
// "Problem Occurred". 
//
// Assumptions:
// - The item is from the Outline View
// - The item is a system implementation, otherwise will follow exception path
//
// Notes:
// The try-catch does not work in ECL as expected. With the catch defined, the
// try will only execute the first statement meaning that the verify-false 
// will not stop the execution as intended. In typical usage another
// downstream failure will stop the execution.
//
// Arguments:
// item item - Typically Outline view item that is a system implementation
// ----------------------------------------------------------------------------
proc "run-agree-single-layer" [val item] {
    exec-with-options {
    	log [format "AGREE Verify Single Layer: %s" [$item | get-text]]
	    $item | select-item | get-menu "AGREE/Verify Single Layer" | click    
        check-problem-dialog
    } -allowStatusDialog
}


// ----------------------------------------------------------------------------
// Given an Item will run AGREE Verify All Layers
// 
// Description:
// Given an Item (presumably from the Outline view) will run the AGREE 
// All Layers. Does allow for a status dialog pop-up if titled
// "Problem Occurred". 
//
// Assumptions:
// - The item is from the Outline View
// - The item is a system implementation, otherwise will follow exception path
//
// Notes:
// The try-catch does not work in ECL as expected. With the catch defined, the
// try will only execute the first statement meaning that the verify-false 
// will not stop the execution as intended. In typical usage another
// downstream failure will stop the execution.
//
// Arguments:
// item item - Typically Outline view item that is a system implementation
// ----------------------------------------------------------------------------
proc "run-agree-all-layers" [val item] {
    exec-with-options {
    	log [format "AGREE Verify All Layers: %s" [$item | get-text]]
        $item | select-item | get-menu "AGREE/Verify All Layers" | click
        check-problem-dialog
    } -allowStatusDialog
}


// ----------------------------------------------------------------------------
// Handles the "Problem Occurred" status dialog pop-up
// 
// Description:
// If an operation causes the "Problem Occurred" dialog to present, this 
// procedure will click the OK button to clear the dialog and then fail
// an assertion to stop the execution.
//
// Assumptions:
// - The calling procedure allows status dialogs:
//      exec-with-options {
//         ...some commands...
//         check-problem-dialog
//      } -allowStatusDialog
//
// ----------------------------------------------------------------------------
proc "check-problem-dialog" {
	try -command {
		get-window "Problem Occurred" | get-button OK | click
		log "Problem Occurred Dialog encountered."
		bool false
	} -catch { bool true } | assert-true
}


// ----------------------------------------------------------------------------
// Checks that the AGREE Contract Guarantees are valid.
//
// Desription:
// Checks the AGREE Results view and determines if the top-level Contract
// Guarantees reports valid. Will wait for AGREE to finish before checking.
// 
// Assumptions:
// - AGREE has been started
//
// Return:
// bool true if valid, false otherwise
// ----------------------------------------------------------------------------
proc "is-guarantees-valid" {
    check-agree-result "Contract Guarantees"
}


// ----------------------------------------------------------------------------
// Checks the AGREE Composition Consistency
//
// Desription:
// Checks the AGREE Results view and determines if the Component Composition
// Consistency reports valid. Will wait for AGREE to finish before checking.
// 
// Assumptions:
// - AGREE has been started
//
// Return:
// bool true if valid, false otherwise
// ----------------------------------------------------------------------------
proc "is-composition-consistent" {
	check-agree-result "Component composition consistent"
}


// ----------------------------------------------------------------------------
// Checks that the AGREE Component is Consistent
//
// Desription:
// Checks the AGREE Results view and determines if the Component is
// Consistent. Will wait for AGREE to finish before checking.
// 
// Assumptions:
// - AGREE has been started
//
// Return:
// bool true if valid, false otherwise
// ----------------------------------------------------------------------------
proc "is-component-consistent" {
	check-agree-result "This component consistent"	
}


// ----------------------------------------------------------------------------
// Checks an AGREE Result
//
// Desription:
// Given a string argument denoting a tree-item name in the AGREE Results view,
// will check that the Result reported is valid. 
//
// Assumptions:
// - AGREE has been started
//
// Return:
// bool true if valid, false otherwise
// ----------------------------------------------------------------------------
proc "check-agree-result" [val theName] {
	wait-for-agree
	try -command {
		and [get-view "AGREE Results" | get-tree | get-item $theName | get-property "columns[1]" -raw | contains "Valid"]
	        [get-view "AGREE Results" | get-tree | get-item $theName | get-property "columns[1]" -raw | contains "Invalid" | not]
	} -catch {
		let [val theItem [concat [get-view "AGREE Results" | get-tree | get-item ".*" | get-text] "/" [$theName]]] {
			and [get-view "AGREE Results" | get-tree | get-item $theItem | get-property "columns[1]" -raw | contains "Valid"]
				[get-view "AGREE Results" | get-tree | get-item $theItem | get-property "columns[1]" -raw | contains "Invalid" | not]
		}
	}
}

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
